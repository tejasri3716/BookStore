// --------------------------------------------------------------------------------------------------------------------
// <copyright file=NoteManager.cs" company="Bridgelabz">
//   Copyright © 2019 Company="BridgeLabz"
// </copyright>
// <creator name="tejasri"/>
// --------------------------------------------------------------------------------------------------------------------
//<auto-generated/>
namespace Manager.Manager
{
    using global::Manager.IManager;
    using Model.NoteModel;
    using Repository.IRepository;
    using System.Collections.Generic;
    using System.Threading.Tasks;

    /// <summary>
    /// NoteManager class implements INoteManager interface
    /// </summary>
    public class NoteManager : INoteManager
    {
        /// <summary>
        /// Instantiating INoteRepository interface
        /// </summary>
        private readonly INoteRepository repository;

        /// <summary>
        /// Adding Dependency
        /// </summary>
        /// <param name="note"></param>
        public NoteManager(INoteRepository note)
        {
            repository = note;
        }

        /// <summary>
        /// Default Constructor
        /// </summary>
        public NoteManager()
        {

        }

        /// <summary>
        /// AddNotes method is used to add notes
        /// </summary>
        /// <param name="note"></param>
        /// <returns>
        /// added successfully
        /// </returns>
        public async Task<string> AddNotes(NoteModel note)
        {
        await this.repository.AddNotes(note);
            return "Added Successfully";
        }

        /// <summary>
        /// DeleteNote method is used to delete note by Id
        /// </summary>
        /// <param name="id"></param>
        /// <returns>
        /// deleted successfully
        /// </returns>
        public async Task<string> DeleteNote(int id)
        {
            await this.repository.DeleteNote(id);
            return "Deleted Successfully";
        }

        /// <summary>
        /// GetNote method is used to get note by Id 
        /// </summary>
        /// <param name="id"></param>
        /// <returns>
        /// specific note details
        /// </returns>
        public List<NoteModel> GetNote(int id)
        {
            var result = this.repository.GetNote(id);
            return result;
        }

        /// <summary>
        /// GetAllNotes method is used to get all notes 
        /// </summary>
        /// <returns>
        /// list of all notes
        /// </returns>
        public List<NoteModel> GetAllNotes()
        {
            return this.repository.GetAllNotes();
        }

        /// <summary>
        /// UpdateNote method is used to update 
        /// </summary>
        /// <param name="note"></param>
        /// <returns>
        /// updated successfully
        /// </returns>
        public async Task<string> UpdateNote(NoteModel note)
        {
             await this.repository.UpdateNote(note);
            return "Updated Successfully";
        }
    }
}